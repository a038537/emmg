#include "parser.h"

const uint8_t init001[24] = {0x02,0x00,0x11,0x00,0x13,0x00,0x03,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x01,0x01};
const uint8_t ans0111[36] = {0x02,0x01,0x11,0x00,0x1f,0x00,0x03,0x00,0x02,0x00,0x01,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x02,0x00,0x00,0x00,0x07,0x00,0x01,0x00};
const uint8_t ans0117[31] = {0x02,0x01,0x17,0x00,0x1a,0x00,0x03,0x00,0x02,0x00,0x01,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x02,0x00,0x64};

const uint8_t emm[0xe0] = {
0x02,0x02,0x11,0x00,0xda,0x00,0x03,0x00,0x02,0x00,0x01,0x00,0x04,0x00,0x02,0x00,
0x01,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x02,0x00,0x00,0x00,
0x05,0x00,0xbc,0x47,0x5f,0xff,0x10,0x00,0x82,0x70,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, //41
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};


/*
Dataset:
 TY HS HS HS PI PI PI PR HM HM HM HM HM HM HM HM HM HM PM PM PM PM PM PM PM PM KI CH ID ST RT VA LD

 00 11 22 33 11 22 33 00 11 22 33 44 55 66 77 88 99 AA 11 22 33 44 55 66 77 88 FF FF FF FF FF FF FF
 01 FF FF FF 11 22 00 02 FF FF FF FF FF FF FF FF FF FF 11 22 33 44 55 66 77 88 02 FF FF FF FF FF FF
 02 FF FF FF 11 22 33 03 FF FF FF FF FF FF FF FF FF FF 11 22 33 44 55 66 77 88 FF FF FF FF FF FF FF
 03 FF FF FF 11 22 00 02 FF FF FF FF FF FF FF FF FF FF 11 22 33 44 55 66 77 88 02 75 30 1E 91 FE 01
 04 FF FF FF 11 22 33 03 FF FF FF FF FF FF FF FF FF FF 11 22 33 44 55 66 77 88 FF 75 30 1E 91 FE 01

 TY HS HS HS PI PI PI PR HM HM HM HM HM HM HM HM HM HM PM PM PM PM PM PM PM PM KI CH ID ST RT VA LD

 TY = Type of EMM
    0 = Write Masterkey + Provider-ID for Provider (PR) (HEX-Addressed (C3)) NEEDED: HM PM HS PR (00 11 22 33) PI
    1 = Writes (KI) Plainkey for Provider (PR) (Group-addressed (02 0A 12 1A)) NEEDED: PK PM PR (02 0A 12 1A) KI
    2 = Kills all ChIDs for Provider (PR) UNIQUE Addressed (03 0B 13 1B) NEEDED: PM PR PI
    3 = Write Key, CHID + DATE + VALID for Provider (PR) (Group-addressed (02 0A 12 1A)) NEEDED: PK CHID START VALID PM PR PI
    4 = Write CHID + START + VALID for Provider (PR) UNIQUE Addressed (03 0B 13 1B) NEEDED: PM CHID START VALID PI
 */


void parse(uint8_t *frame,char *tbuffer){
    uint8_t fbuffer[33];
    uint8_t type, provider, keyident, hexserial[3],providerid[3],hexmasterkey[10],plainmaster[8],startdate[2],valid[2],chid[2];

        for(int i = 0;i <=32;i++){fbuffer[i] = (tbuffer[i]&0xff);}
        memcpy(&type,&fbuffer[0],1);
        memcpy(&hexserial,&fbuffer[1],3);
        memcpy(&provider,&fbuffer[7],1);
        memcpy(&providerid,&fbuffer[4],3);
        memcpy(&hexmasterkey,&fbuffer[8],10);
        memcpy(&plainmaster,&fbuffer[18],8);
        memcpy(&keyident,&fbuffer[26],1);
        memcpy(&chid,&fbuffer[27],2);
        memcpy(&startdate,&fbuffer[29],2);
        memcpy(&valid,&fbuffer[31],2);
        memset(frame, 0, 188);

        generate_emm(frame,type,hexserial,providerid,provider,hexmasterkey,plainmaster,keyident,chid,startdate,valid);
}


void setup(int runde,char *sendbuffer){
int i;
     //send(SendingSocket, init001, ((init001[4]+5) &0xff ), 0);
     switch(runde){
     case 0:{
        for(i =0;i < init001[4]+5;i++){printf("%02X ",init001[i]&0xff);}
        for(i =0;i < init001[4]+5;i++){sendbuffer[i] = (init001[i]&0xff);}
        break;
     }
    case 1:{
        for(i =0;i < ans0111[4]+5;i++){printf("%02X ",ans0111[i]&0xff);}
        for(i =0;i < ans0111[4]+5;i++){sendbuffer[i] = (ans0111[i]&0xff);}
        break;
    }
    case 2:{
        for(i =0;i < ans0117[4]+5;i++){printf("%02X ",ans0117[i]&0xff);}
        for(i =0;i < ans0117[4]+5;i++){sendbuffer[i] = (ans0117[i]&0xff);}
        break;
    }
}
}

void genemm(char *sendbuffer){

    //for(int i =0;i < emm[4]+5;i++){printf("%02X ",emm[i]&0xff);}
    for(int i =0;i < emm[4]+5;i++){sendbuffer[i] = (emm[i]&0xff);}
    //printf("\n");
}
